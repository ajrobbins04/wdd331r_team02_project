
@function random-px($min, $max) {
    // random() returns a random value from 0 to 1, so 
    // scale the randomly generated value to the given range
    @return ($min + random() * ($max - $min)) + px;
}

@function random-no-unit($min, $max) {
  // random() returns a random value from 0 to 1, so 
  // scale the randomly generated value to the given range
  @return ($min + random() * ($max - $min));
}

@function modify-opacity($opacity, $interval) {

  // currently keeps each color component at white, but method can
  // be changed to modify the color as well if needed
  $red: 255;
  $green: 255;
  $blue: 255;

  // Calculate the final opacity
  $final-opacity: $opacity * $interval;

  // Ensure opacity is within valid range (0 to 1)
  $final-opacity: min(max($final-opacity, 0), 1);
    
  // Return the rgba color with calculated opacity
  @return rgba($red, $green, $blue, $final-opacity);

}

@mixin generate-keyframes-large($stars, $opacities) {
 
    @for $i from 1 through length($stars) {
      $star: nth($stars, $i);
      $opacity: nth($opacities, ($i % length($opacities)) + 1);
      
      @keyframes twinkle-large-#{$i} {
        0% {
          box-shadow: $stars;
        }
        60% {
          $interval: 0.80;
          $twinkling-star: apply-twinkle($star, $opacity, $interval);
          $stars: set-nth($stars, $i, $twinkling-star);
          box-shadow: $stars;
        }
        100% {
          box-shadow: $stars;
        }
      }
    }
  }

    @mixin generate-keyframes-small($stars, $opacities) {
 
      @for $i from 1 through length($stars) {
        $star: nth($stars, $i);
        $opacity: nth($opacities, ($i % length($opacities)) + 1);
        
        @keyframes twinkle-large-#{$i} {
          0% {
            box-shadow: $stars;
          }
          20% {
            $interval: 0.80;
            $twinkling-star: apply-twinkle($star, $opacity, $interval);
            $stars: set-nth($stars, $i, $twinkling-star);
            box-shadow: $stars;
          }
          100% {
            box-shadow: $stars;
          }
        }
      }
    }

@mixin animate-stars() {
  @keyframes float-up {
    0% {
      transform: translateY(0px);
    }
    100% {
      transform: translateY(-100px);
    }
  }
  animation: float-up 60s linear infinite;
}

  /*@mixin animate-shooting-stars() {
    
      $delay: #{random(10)}s;

      @keyframes shooting-star {
        0% {
          translate: (100vw, 0);
          opacity: 1;
        }
        100% {
          translate: (25vw, 25vh);
          opacity: 1;
        }
      }
      animation: shooting-star 3s ease-in-out infinite;
      animation-delay: $delay;
    }
  
  */
  @mixin animate-shooting-stars($delay) {

    @keyframes shooting-star {
      0% {
        transform: translate(100vw, 0);
        opacity: 1;
      }
      100% {
        transform: translate(0, 100vh);
        opacity: 0;
      }
    }
    animation: shooting-star 3s ease-in-out infinite;
    animation-delay: $delay;
  }

@mixin generate-shooting-stars($count) {

  //$delay: '2s', '6s', '1s', '5s', '4s';
  $shooting-stars: ();
  $delay: 0;
  $size: 0;
  $color: 0;

  @for $i from 1 through $count {

    $delay: #{random(10)}s;
    $color: rgba(255, 255, 255, 1);
    $size: 2px;

    // add string to list of stars using a comma as the separator
    //$shooting-stars: append($shooting-stars, $star, comma);
    @keyframes shooting-star {
      0% {
        transform: translate(0, 0) rotate(45deg);
        opacity: 1;
      }
      70% {
        opacity: 1;
      }
      100% {
        transform: translate(-1000px, 1000px) rotate(45deg);
        opacity: 0;
      }
  }

  box-shadow: 0 0 0 #{$size} #{$color};
  animation: shooting-star 3s linear infinite;


  //box-shadow: $shooting-stars;
}
} 


@function apply-twinkle($star, $opacity, $interval) {

    // note that first item in a sass list is at index 1, not 0
    $star-color: nth($star, 5);
    
    // Create new color with updated opacity
    $new-color: modify-opacity($opacity, $interval);

    // Update the star with the new opacity value
    $star: set-nth($star, 5, $new-color);

    @return $star;
}

@function generate-stars($count, $size-min, $size-max) {

  $opacities: 1, 0.8, 0.8, 0.6, 0.6, 0.6, 0.4, 0.4, 0.2, 0.1;

  // stores box-shadow property value to create each star
  $stars: ();

    @for $i from 1 through $count {
      $opacity: nth($opacities, ($i % length($opacities)) + 1);
      // color not passed in as argument so all elements that use the mixin
      // share the same color (currently white), but different opacity values
      $color: rgba(255, 255, 255, $opacity);

      // generates random value from 0 to 100 and adds vw/vh as its unit
      $x: #{random(100)} + 'vw';
      $y: #{random(100)} + 'vh';

      $size: random-px($size-min, $size-max);

      // generate star string with all necessary values
      $star: #{$x} #{$y} #{$size} #{$size} rgba(255, 255, 255, $opacity);

      // add string to list of stars using a comma as the separator
      $stars: append($stars, $star, comma);
   
    }
    @return $stars;
  
  }