@use "sass:map";

@function random-px($min, $max) {
    @return ($min + random() * ($max - $min)) + px;
}

@mixin move-stars() {
  @keyframes float-up {
    0% {
      transform: translateY(0px);
    }
    100% {
      transform: translateY(-100px);
    }
  }
  animation: float-up 60s linear infinite;
}


@mixin twinkle-stars($stars-map) {

  // altering each star's initial property values
  // maintains a degree of variation when transforming stars
  @each $key, $star in $stars-map {
    $x: map-get($star, x);
    $y: map-get($star, y);
    $size-no-px: map-get($star, size-no-px);
    $size: map-get($star, size);
    $opacity: map-get($star, opacity);

    @keyframes twinkle {
      0% {
        opacity: $opacity;
      }
      25% {
        opacity: $opacity * 0.3;
      }
      50% {
        opacity: $opacity;
      }
      75% {
        opacity: $opacity * -0.3;
      }
      100% {
        opacity: $opacity;
      }
    }
    animation: twinkle 3s linear infinite;
    animation-delay: #{random(15)}s; // random delay for each star
    
  }
}

// creates and returns stars at random locations w/varying opacity values
@function get-stars($count) {
    
    $stars-map: ();
    $opacities: 1, 0.8, 0.8, 0.6, 0.6, 0.6, 0.4, 0.4, 0.2, 0.1;
    
    @for $i from 1 through $count {
    
        $opacity: nth($opacities, ($i % length($opacities)) + 1);

        // color not passed in as argument so all elements that use the mixin
        // share the same color (currently white), but different opacity values
        $color: rgba(255, 255, 255, $opacity);
        $size-no-px: 0;
        // random size between 0 and 1 pixels
        @if $i % 6 == 0 {
          $size-no-px: random(2);
        }
        @else {
          $size-no-px: random();
        }
        $size: #{$size-no-px}px;
        $width: $size; 
        $height: $size;

        // generates random value from 0 to 100 and adds vw/vh as its unit
        $x: #{random(100)} + 'vw';
        $y: #{random(100)} + 'vh';

        // store all star properties in a map
        $star-map: (
          'x': $x,
          'y': $y,
          'size-no-px': $size-no-px,
          'size': $size,
          'opacity': $opacity,
        );

        // add the map to the main stars map, using $i index as its key
        $stars-map: map-merge($stars-map, ($i: $star-map));
    }
    
    @return $stars-map;
}


@mixin generate-stars($stars-map) {

  // stores stars in a list to assign them to box-shadow property
  $stars: ();

  @each $key, $star in $stars-map {

    // unpack all values to assign them to their separate variables
    $x: map-get($star, 'x');
    $y: map-get($star, 'y');
    $size-no-px: map-get($star, 'size-no-px');
    $size: map-get($star, 'size');
    $opacity: map-get($star, 'opacity');

    // generate star string with all necessary values
    $star: #{$x} #{$y} #{$size} #{$size} rgba(255, 255, 255, $opacity);

    // add string to list of stars using a comma as the separator
    $stars: append($stars, $star, comma);
  }
  // stars assigned to box-shadow property
  box-shadow: $stars;
}
